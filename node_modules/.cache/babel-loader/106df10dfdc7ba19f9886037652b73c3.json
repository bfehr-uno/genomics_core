{"ast":null,"code":"import _objectSpread from\"C:/Users/bfehr/dev/genomics_core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/bfehr/dev/genomics_core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"C:/Users/bfehr/dev/genomics_core/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";var _excluded=[\"customers\"];import{useState}from'react';import moment from'moment';import PerfectScrollbar from'react-perfect-scrollbar';import{Avatar,Box,Card,Checkbox,Table,TableBody,TableCell,TableHead,TablePagination,TableRow,Typography}from'@material-ui/core';import getInitials from'../../utils/getInitials';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CustomerListResults=function CustomerListResults(_ref){var customers=_ref.customers,rest=_objectWithoutProperties(_ref,_excluded);var _useState=useState([]),_useState2=_slicedToArray(_useState,2),selectedCustomerIds=_useState2[0],setSelectedCustomerIds=_useState2[1];var _useState3=useState(10),_useState4=_slicedToArray(_useState3,2),limit=_useState4[0],setLimit=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),page=_useState6[0],setPage=_useState6[1];var handleSelectAll=function handleSelectAll(event){var newSelectedCustomerIds;if(event.target.checked){newSelectedCustomerIds=customers.map(function(customer){return customer.id;});}else{newSelectedCustomerIds=[];}setSelectedCustomerIds(newSelectedCustomerIds);};var handleSelectOne=function handleSelectOne(event,id){var selectedIndex=selectedCustomerIds.indexOf(id);var newSelectedCustomerIds=[];if(selectedIndex===-1){newSelectedCustomerIds=newSelectedCustomerIds.concat(selectedCustomerIds,id);}else if(selectedIndex===0){newSelectedCustomerIds=newSelectedCustomerIds.concat(selectedCustomerIds.slice(1));}else if(selectedIndex===selectedCustomerIds.length-1){newSelectedCustomerIds=newSelectedCustomerIds.concat(selectedCustomerIds.slice(0,-1));}else if(selectedIndex>0){newSelectedCustomerIds=newSelectedCustomerIds.concat(selectedCustomerIds.slice(0,selectedIndex),selectedCustomerIds.slice(selectedIndex+1));}setSelectedCustomerIds(newSelectedCustomerIds);};var handleLimitChange=function handleLimitChange(event){setLimit(event.target.value);};var handlePageChange=function handlePageChange(event,newPage){setPage(newPage);};return/*#__PURE__*/_jsxs(Card,_objectSpread(_objectSpread({},rest),{},{children:[/*#__PURE__*/_jsx(PerfectScrollbar,{children:/*#__PURE__*/_jsx(Box,{sx:{minWidth:1050},children:/*#__PURE__*/_jsxs(Table,{children:[/*#__PURE__*/_jsx(TableHead,{children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{padding:\"checkbox\",children:/*#__PURE__*/_jsx(Checkbox,{checked:selectedCustomerIds.length===customers.length,color:\"primary\",indeterminate:selectedCustomerIds.length>0&&selectedCustomerIds.length<customers.length,onChange:handleSelectAll})}),/*#__PURE__*/_jsx(TableCell,{children:\"Name\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Email\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Location\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Phone\"}),/*#__PURE__*/_jsx(TableCell,{children:\"Registration date\"})]})}),/*#__PURE__*/_jsx(TableBody,{children:customers.slice(0,limit).map(function(customer){return/*#__PURE__*/_jsxs(TableRow,{hover:true,selected:selectedCustomerIds.indexOf(customer.id)!==-1,children:[/*#__PURE__*/_jsx(TableCell,{padding:\"checkbox\",children:/*#__PURE__*/_jsx(Checkbox,{checked:selectedCustomerIds.indexOf(customer.id)!==-1,onChange:function onChange(event){return handleSelectOne(event,customer.id);},value:\"true\"})}),/*#__PURE__*/_jsx(TableCell,{children:/*#__PURE__*/_jsxs(Box,{sx:{alignItems:'center',display:'flex'},children:[/*#__PURE__*/_jsx(Avatar,{src:customer.avatarUrl,sx:{mr:2},children:getInitials(customer.name)}),/*#__PURE__*/_jsx(Typography,{color:\"textPrimary\",variant:\"body1\",children:customer.name})]})}),/*#__PURE__*/_jsx(TableCell,{children:customer.email}),/*#__PURE__*/_jsx(TableCell,{children:\"\".concat(customer.address.city,\", \").concat(customer.address.state,\", \").concat(customer.address.country)}),/*#__PURE__*/_jsx(TableCell,{children:customer.phone}),/*#__PURE__*/_jsx(TableCell,{children:moment(customer.createdAt).format('DD/MM/YYYY')})]},customer.id);})})]})})}),/*#__PURE__*/_jsx(TablePagination,{component:\"div\",count:customers.length,onPageChange:handlePageChange,onRowsPerPageChange:handleLimitChange,page:page,rowsPerPage:limit,rowsPerPageOptions:[5,10,25]})]}));};export default CustomerListResults;","map":{"version":3,"sources":["C:/Users/bfehr/dev/genomics_core/src/components/customer/CustomerListResults.js"],"names":["useState","moment","PerfectScrollbar","Avatar","Box","Card","Checkbox","Table","TableBody","TableCell","TableHead","TablePagination","TableRow","Typography","getInitials","CustomerListResults","customers","rest","selectedCustomerIds","setSelectedCustomerIds","limit","setLimit","page","setPage","handleSelectAll","event","newSelectedCustomerIds","target","checked","map","customer","id","handleSelectOne","selectedIndex","indexOf","concat","slice","length","handleLimitChange","value","handlePageChange","newPage","minWidth","alignItems","display","avatarUrl","mr","name","email","address","city","state","country","phone","createdAt","format"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Card,\r\n  Checkbox,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport getInitials from '../../utils/getInitials';\r\n\r\nconst CustomerListResults = ({ customers, ...rest }) => {\r\n  const [selectedCustomerIds, setSelectedCustomerIds] = useState([]);\r\n  const [limit, setLimit] = useState(10);\r\n  const [page, setPage] = useState(0);\r\n\r\n  const handleSelectAll = (event) => {\r\n    let newSelectedCustomerIds;\r\n\r\n    if (event.target.checked) {\r\n      newSelectedCustomerIds = customers.map((customer) => customer.id);\r\n    } else {\r\n      newSelectedCustomerIds = [];\r\n    }\r\n\r\n    setSelectedCustomerIds(newSelectedCustomerIds);\r\n  };\r\n\r\n  const handleSelectOne = (event, id) => {\r\n    const selectedIndex = selectedCustomerIds.indexOf(id);\r\n    let newSelectedCustomerIds = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds, id);\r\n    } else if (selectedIndex === 0) {\r\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(1));\r\n    } else if (selectedIndex === selectedCustomerIds.length - 1) {\r\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(\r\n        selectedCustomerIds.slice(0, selectedIndex),\r\n        selectedCustomerIds.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelectedCustomerIds(newSelectedCustomerIds);\r\n  };\r\n\r\n  const handleLimitChange = (event) => {\r\n    setLimit(event.target.value);\r\n  };\r\n\r\n  const handlePageChange = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  return (\r\n    <Card {...rest}>\r\n      <PerfectScrollbar>\r\n        <Box sx={{ minWidth: 1050 }}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                  <Checkbox\r\n                    checked={selectedCustomerIds.length === customers.length}\r\n                    color=\"primary\"\r\n                    indeterminate={\r\n                      selectedCustomerIds.length > 0\r\n                      && selectedCustomerIds.length < customers.length\r\n                    }\r\n                    onChange={handleSelectAll}\r\n                  />\r\n                </TableCell>\r\n                <TableCell>\r\n                  Name\r\n                </TableCell>\r\n                <TableCell>\r\n                  Email\r\n                </TableCell>\r\n                <TableCell>\r\n                  Location\r\n                </TableCell>\r\n                <TableCell>\r\n                  Phone\r\n                </TableCell>\r\n                <TableCell>\r\n                  Registration date\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {customers.slice(0, limit).map((customer) => (\r\n                <TableRow\r\n                  hover\r\n                  key={customer.id}\r\n                  selected={selectedCustomerIds.indexOf(customer.id) !== -1}\r\n                >\r\n                  <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                      checked={selectedCustomerIds.indexOf(customer.id) !== -1}\r\n                      onChange={(event) => handleSelectOne(event, customer.id)}\r\n                      value=\"true\"\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Box\r\n                      sx={{\r\n                        alignItems: 'center',\r\n                        display: 'flex'\r\n                      }}\r\n                    >\r\n                      <Avatar\r\n                        src={customer.avatarUrl}\r\n                        sx={{ mr: 2 }}\r\n                      >\r\n                        {getInitials(customer.name)}\r\n                      </Avatar>\r\n                      <Typography\r\n                        color=\"textPrimary\"\r\n                        variant=\"body1\"\r\n                      >\r\n                        {customer.name}\r\n                      </Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {customer.email}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {`${customer.address.city}, ${customer.address.state}, ${customer.address.country}`}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {customer.phone}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {moment(customer.createdAt).format('DD/MM/YYYY')}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </Box>\r\n      </PerfectScrollbar>\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={customers.length}\r\n        onPageChange={handlePageChange}\r\n        onRowsPerPageChange={handleLimitChange}\r\n        page={page}\r\n        rowsPerPage={limit}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nCustomerListResults.propTypes = {\r\n  customers: PropTypes.array.isRequired\r\n};\r\n\r\nexport default CustomerListResults;\r\n"]},"metadata":{},"sourceType":"module"}