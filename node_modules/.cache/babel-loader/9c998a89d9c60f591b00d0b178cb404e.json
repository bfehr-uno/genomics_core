{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bfehr\\\\dev\\\\genomics_core\\\\src\\\\components\\\\Samples.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, getDocs, query, where } from 'firebase/firestore';\nimport CSSBaseline from '@material-ui/core';\nimport { MaUTable, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core';\nimport { useTable } from 'react-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Table = ({\n  columns,\n  data\n}) => {\n  _s();\n\n  const {\n    getTableProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  });\n  return /*#__PURE__*/_jsxDEV(MaUTable, { ...getTableProps(),\n    children: [/*#__PURE__*/_jsxDEV(TableHead, {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(TableRow, { ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.header.map(column => /*#__PURE__*/_jsxDEV(TableCell, { ...column.getHeaderProps(),\n          children: column.reder('Header')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n      children: rows.map((row, i) => {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(TableRow, { ...row.getRowProps(),\n          children: row.cells.map(cell => {\n            return /*#__PURE__*/_jsxDEV(TableCell, { ...cell.getCellProps(),\n              children: cell.render('Cell')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Table, \"Xnx1aw5Ajdh27qgCo7ZNFYuAvQ0=\", false, function () {\n  return [useTable];\n});\n\n_c = Table;\n\nconst getSamples = async () => {\n  initializeApp({\n    apiKey: 'AIzaSyC64KY9UehoX2fk7Ugw2XNPvG4zZ7sSdsQ',\n    authDomain: 'uno-genomics.firebaseapp.com',\n    databaseURL: 'https://uno-genomics-default-rtdb.firebaseio.com',\n    projectId: 'uno-genomics',\n    storageBucket: 'uno-genomics.appspot.com',\n    messagingSenderId: '351603848354',\n    appId: '1:351603848354:web:e974a024da6b7e7472d3fb'\n  });\n  const samplesCollection = collection(getFirestore(), 'samples');\n  const samples = [];\n\n  if (localStorage.getItem('isAdmin') === 'true') {\n    const querySnapshot = await getDocs(samplesCollection);\n    querySnapshot.forEach(doc => {\n      samples.push(doc.data());\n    });\n  } else {\n    const querySnapshot = await getDocs(query(samplesCollection, where('userID', '==', localStorage.getItem('userID'))));\n    querySnapshot.forEach(doc => {\n      samples.push(doc.data());\n    });\n  }\n\n  return samples;\n};\n\nconst Samples = () => {\n  _s2();\n\n  const columns = React.useMemo(() => [{\n    Header: 'name',\n    accessor: 'name'\n  }, {\n    Header: 'stage',\n    accessor: 'stage'\n  }, {\n    Header: 'date of submission',\n    accessor: 'submissionDate'\n  }, {\n    Header: 'estimated completion date',\n    accessor: 'completionDateEstimate'\n  }], []);\n  const data = React.useMemo(() => getSamples());\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Samples, \"7zObr1GywQUmP9L3sfy/4IDluAk=\");\n\n_c2 = Samples;\nexport default Samples;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Table\");\n$RefreshReg$(_c2, \"Samples\");","map":{"version":3,"sources":["C:/Users/bfehr/dev/genomics_core/src/components/Samples.js"],"names":["React","initializeApp","getFirestore","collection","getDocs","query","where","CSSBaseline","MaUTable","TableBody","TableCell","TableHead","TableRow","useTable","Table","columns","data","getTableProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","header","column","getHeaderProps","reder","row","i","getRowProps","cells","cell","getCellProps","render","getSamples","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","samplesCollection","samples","localStorage","getItem","querySnapshot","forEach","doc","push","Samples","useMemo","Header","accessor"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { initializeApp } from 'firebase/app';\r\nimport {\r\n  getFirestore, collection, getDocs, query, where\r\n} from 'firebase/firestore';\r\nimport CSSBaseline from '@material-ui/core';\r\nimport {\r\n  MaUTable, TableBody, TableCell, TableHead, TableRow\r\n} from '@material-ui/core';\r\nimport { useTable } from 'react-table';\r\n\r\nconst Table = ({ columns, data }) => {\r\n  const { getTableProps, headerGroups, rows, prepareRow } = useTable({\r\n    columns, \r\n    data,\r\n  });\r\n\r\n  return (\r\n    <MaUTable {...getTableProps()}>\r\n      <TableHead>\r\n        {headerGroups.map(headerGroup => (\r\n          <TableRow {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.header.map(column => (\r\n              <TableCell {...column.getHeaderProps()}>\r\n                {column.reder('Header')}\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        ))}\r\n      </TableHead>\r\n      <TableBody>\r\n        {rows.map((row, i) => {\r\n          prepareRow(row);\r\n          return (\r\n            <TableRow {...row.getRowProps()}>\r\n              {row.cells.map(cell => {\r\n                return (\r\n                  <TableCell {...cell.getCellProps()}>\r\n                    {cell.render('Cell')}\r\n                  </TableCell>\r\n                )\r\n              })}\r\n            </TableRow>\r\n          )\r\n        })}\r\n      </TableBody>\r\n    </MaUTable>\r\n  )\r\n};\r\n\r\nconst getSamples = async () => {\r\n  initializeApp({\r\n    apiKey: 'AIzaSyC64KY9UehoX2fk7Ugw2XNPvG4zZ7sSdsQ',\r\n    authDomain: 'uno-genomics.firebaseapp.com',\r\n    databaseURL: 'https://uno-genomics-default-rtdb.firebaseio.com',\r\n    projectId: 'uno-genomics',\r\n    storageBucket: 'uno-genomics.appspot.com',\r\n    messagingSenderId: '351603848354',\r\n    appId: '1:351603848354:web:e974a024da6b7e7472d3fb'\r\n  });\r\n\r\n  const samplesCollection = collection(getFirestore(), 'samples');\r\n  const samples = [];\r\n\r\n  if (localStorage.getItem('isAdmin') === 'true') {\r\n    const querySnapshot = await getDocs(samplesCollection);\r\n    querySnapshot.forEach((doc) => {\r\n      samples.push(doc.data());\r\n    });\r\n  } else {\r\n    const querySnapshot = await getDocs(query(samplesCollection, where('userID', '==', localStorage.getItem('userID'))));\r\n    querySnapshot.forEach((doc) => {\r\n      samples.push(doc.data());\r\n    });\r\n  }\r\n\r\n  return samples;\r\n};\r\n\r\nconst Samples = () => {\r\n  const columns = React.useMemo(() => [\r\n    { Header: 'name', accessor: 'name' },\r\n    { Header: 'stage', accessor: 'stage' },\r\n    { Header: 'date of submission', accessor: 'submissionDate' },\r\n    { Header: 'estimated completion date', accessor: 'completionDateEstimate' },\r\n  ],\r\n  []);\r\n\r\n  const data = React.useMemo(() => getSamples());\r\n\r\n  return (\r\n    <div>\r\n      <CssBaseline />\r\n      <Table columns={columns} data={data} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Samples;\r\n"]},"metadata":{},"sourceType":"module"}