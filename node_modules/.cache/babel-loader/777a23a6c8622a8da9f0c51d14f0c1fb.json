{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bfehr\\\\dev\\\\genomics_core\\\\src\\\\components\\\\Samples.js\";\nimport React from 'react';\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, getDocs, query, where } from 'firebase/firestore';\nimport EnhancedTable from './table/EnhancedTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getSamples = async () => {\n  initializeApp({\n    apiKey: 'AIzaSyC64KY9UehoX2fk7Ugw2XNPvG4zZ7sSdsQ',\n    authDomain: 'uno-genomics.firebaseapp.com',\n    databaseURL: 'https://uno-genomics-default-rtdb.firebaseio.com',\n    projectId: 'uno-genomics',\n    storageBucket: 'uno-genomics.appspot.com',\n    messagingSenderId: '351603848354',\n    appId: '1:351603848354:web:e974a024da6b7e7472d3fb'\n  });\n  const samplesCollection = collection(getFirestore(), 'samples');\n  const samples = [];\n\n  if (localStorage.getItem('isAdmin') === 'true') {\n    const querySnapshot = await getDocs(samplesCollection);\n    querySnapshot.forEach(doc => {\n      samples.push(doc.data());\n    });\n  } else {\n    const querySnapshot = await getDocs(query(samplesCollection, where('userID', '==', localStorage.getItem('userID'))));\n    querySnapshot.forEach(doc => {\n      samples.push(doc.data());\n    });\n  }\n\n  return samples;\n};\n\nconst columns = React.useMemo(() => [{\n  Header: 'name',\n  accessor: 'name'\n}, {\n  Header: 'stage',\n  accessor: 'stage'\n}, {\n  Header: 'date of submission',\n  accessor: 'submissionDate'\n}, {\n  Header: 'estimated completion date',\n  accessor: 'completionDateEstimate'\n}]);\nconst [data, setData] = React.useState(React.useMemo(() => [getSamples()]));\nconst [skipPageReset, setSkipPageReset] = React.useState(false);\n\nconst updateMyData = (rowIndex, columnId, value) => {\n  setSkipPageReset(true);\n  setData(old => old.map((row, index) => {\n    if (index === rowIndex) {\n      return { ...old[rowIndex],\n        [columnId]: value\n      };\n    }\n\n    return row;\n  }));\n};\n\nconst Samples = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: /*#__PURE__*/_jsxDEV(EnhancedTable, {\n    columns: columns,\n    data: data,\n    setData: setData,\n    updateMyData: updateMyData,\n    skipPageReset: skipPageReset\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 62,\n  columnNumber: 3\n}, this);\n\n_c = Samples;\nexport default Samples;\n\nvar _c;\n\n$RefreshReg$(_c, \"Samples\");","map":{"version":3,"sources":["C:/Users/bfehr/dev/genomics_core/src/components/Samples.js"],"names":["React","initializeApp","getFirestore","collection","getDocs","query","where","EnhancedTable","getSamples","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","samplesCollection","samples","localStorage","getItem","querySnapshot","forEach","doc","push","data","columns","useMemo","Header","accessor","setData","useState","skipPageReset","setSkipPageReset","updateMyData","rowIndex","columnId","value","old","map","row","index","Samples"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport { initializeApp } from 'firebase/app';\r\nimport {\r\n  getFirestore, collection, getDocs, query, where\r\n} from 'firebase/firestore';\r\nimport EnhancedTable from './table/EnhancedTable';\r\n\r\nconst getSamples = async () => {\r\n  initializeApp({\r\n    apiKey: 'AIzaSyC64KY9UehoX2fk7Ugw2XNPvG4zZ7sSdsQ',\r\n    authDomain: 'uno-genomics.firebaseapp.com',\r\n    databaseURL: 'https://uno-genomics-default-rtdb.firebaseio.com',\r\n    projectId: 'uno-genomics',\r\n    storageBucket: 'uno-genomics.appspot.com',\r\n    messagingSenderId: '351603848354',\r\n    appId: '1:351603848354:web:e974a024da6b7e7472d3fb'\r\n  });\r\n\r\n  const samplesCollection = collection(getFirestore(), 'samples');\r\n  const samples = [];\r\n\r\n  if (localStorage.getItem('isAdmin') === 'true') {\r\n    const querySnapshot = await getDocs(samplesCollection);\r\n    querySnapshot.forEach((doc) => {\r\n      samples.push(doc.data());\r\n    });\r\n  } else {\r\n    const querySnapshot = await getDocs(query(samplesCollection, where('userID', '==', localStorage.getItem('userID'))));\r\n    querySnapshot.forEach((doc) => {\r\n      samples.push(doc.data());\r\n    });\r\n  }\r\n\r\n  return samples;\r\n};\r\n\r\nconst columns = React.useMemo(() => [\r\n  { Header: 'name', accessor: 'name' },\r\n  { Header: 'stage', accessor: 'stage' },\r\n  { Header: 'date of submission', accessor: 'submissionDate' },\r\n  { Header: 'estimated completion date', accessor: 'completionDateEstimate' }\r\n]);\r\n\r\nconst [data, setData] = React.useState(React.useMemo(() => [getSamples()]));\r\nconst [skipPageReset, setSkipPageReset] = React.useState(false);\r\n\r\nconst updateMyData = (rowIndex, columnId, value) => {\r\n  setSkipPageReset(true);\r\n  setData((old) => old.map((row, index) => {\r\n    if (index === rowIndex) {\r\n      return {\r\n        ...old[rowIndex],\r\n        [columnId]: value,\r\n      };\r\n    }\r\n    return row;\r\n  }));\r\n}\r\n\r\nconst Samples = () => (\r\n  <div>\r\n    <EnhancedTable columns={columns} data={data} setData={setData} updateMyData={updateMyData} skipPageReset={skipPageReset} />\r\n  </div>\r\n);\r\n\r\nexport default Samples;\r\n"]},"metadata":{},"sourceType":"module"}