{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bfehr\\\\dev\\\\genomics_core\\\\src\\\\components\\\\Samples.js\";\nimport React from 'react';\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, getDocs, query, where } from 'firebase/firestore';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getSamples = async () => {\n  initializeApp({\n    apiKey: 'AIzaSyC64KY9UehoX2fk7Ugw2XNPvG4zZ7sSdsQ',\n    authDomain: 'uno-genomics.firebaseapp.com',\n    databaseURL: 'https://uno-genomics-default-rtdb.firebaseio.com',\n    projectId: 'uno-genomics',\n    storageBucket: 'uno-genomics.appspot.com',\n    messagingSenderId: '351603848354',\n    appId: '1:351603848354:web:e974a024da6b7e7472d3fb'\n  });\n  const samplesCollection = collection(getFirestore(), 'samples');\n  const samples = [];\n  let id = 1;\n\n  if (localStorage.getItem('isAdmin') === 'true') {\n    const querySnapshot = await getDocs(samplesCollection);\n    querySnapshot.forEach(doc => {\n      const sample = {\n        id,\n        name: doc.get('name'),\n        stage: doc.get('stage'),\n        submissionDate: doc.get('submissionDate'),\n        completionDateEstimate: doc.get('completionDateEstimate')\n      };\n      samples.push(sample);\n    });\n  } else {\n    const querySnapshot = await getDocs(query(samplesCollection, where('userID', '==', localStorage.getItem('userID'))));\n    querySnapshot.forEach(doc => {\n      const sample = {\n        id,\n        name: doc.get('name'),\n        stage: doc.get('stage'),\n        submissionDate: doc.get('submissionDate'),\n        completionDateEstimate: doc.get('completionDateEstimate')\n      };\n      samples.push(sample);\n    });\n  }\n\n  return samples;\n};\n\nconst Samples = () => {\n  const rows = getSamples();\n  const columns = [{\n    field: 'name',\n    headerName: 'Name',\n    width: 150\n  }, {\n    field: 'stage',\n    headerName: 'Stage',\n    width: 150\n  }, {\n    field: 'submissionDate',\n    headerName: 'Date of Submission',\n    width: 150\n  }, {\n    field: 'completionDateEstimate',\n    headerName: 'Estimated Completion Date',\n    width: 150\n  }];\n  return /*#__PURE__*/_jsxDEV(DataGrid, {\n    rows: rows,\n    columns: columns\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Samples;\nexport default Samples;\n\nvar _c;\n\n$RefreshReg$(_c, \"Samples\");","map":{"version":3,"sources":["C:/Users/bfehr/dev/genomics_core/src/components/Samples.js"],"names":["React","initializeApp","getFirestore","collection","getDocs","query","where","DataGrid","getSamples","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","samplesCollection","samples","id","localStorage","getItem","querySnapshot","forEach","doc","sample","name","get","stage","submissionDate","completionDateEstimate","push","Samples","rows","columns","field","headerName","width"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { initializeApp } from 'firebase/app';\r\nimport {\r\n  getFirestore, collection, getDocs, query, where\r\n} from 'firebase/firestore';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\n\r\nconst getSamples = async () => {\r\n  initializeApp({\r\n    apiKey: 'AIzaSyC64KY9UehoX2fk7Ugw2XNPvG4zZ7sSdsQ',\r\n    authDomain: 'uno-genomics.firebaseapp.com',\r\n    databaseURL: 'https://uno-genomics-default-rtdb.firebaseio.com',\r\n    projectId: 'uno-genomics',\r\n    storageBucket: 'uno-genomics.appspot.com',\r\n    messagingSenderId: '351603848354',\r\n    appId: '1:351603848354:web:e974a024da6b7e7472d3fb'\r\n  });\r\n\r\n  const samplesCollection = collection(getFirestore(), 'samples');\r\n  \r\n  const samples = [];\r\n  let id = 1;\r\n  if (localStorage.getItem('isAdmin') === 'true') {\r\n    const querySnapshot = await getDocs(samplesCollection);\r\n    querySnapshot.forEach((doc) => {\r\n      const sample = { id, name: doc.get('name'), stage: doc.get('stage'), submissionDate: doc.get('submissionDate'), completionDateEstimate: doc.get('completionDateEstimate') };\r\n      samples.push(sample);\r\n    });\r\n  } else {\r\n    const querySnapshot = await getDocs(query(samplesCollection, where('userID', '==', localStorage.getItem('userID'))));\r\n    querySnapshot.forEach((doc) => {\r\n      const sample = { id, name: doc.get('name'), stage: doc.get('stage'), submissionDate: doc.get('submissionDate'), completionDateEstimate: doc.get('completionDateEstimate') };\r\n      samples.push(sample);\r\n    });\r\n  }\r\n\r\n  return samples;\r\n};\r\n\r\nconst Samples = () => {\r\n  const rows = getSamples();\r\n  const columns = [\r\n    { field: 'name', headerName: 'Name', width: 150 },\r\n    { field: 'stage', headerName: 'Stage', width: 150 }, \r\n    { field: 'submissionDate', headerName: 'Date of Submission', width: 150 },\r\n    { field: 'completionDateEstimate', headerName: 'Estimated Completion Date', width: 150 },\r\n  ];\r\n\r\n  return (\r\n    <DataGrid rows={rows} columns={columns} /> \r\n  );\r\n};\r\n\r\nexport default Samples;\r\n"]},"metadata":{},"sourceType":"module"}