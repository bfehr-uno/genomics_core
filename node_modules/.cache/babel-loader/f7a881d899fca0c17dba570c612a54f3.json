{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bfehr\\\\dev\\\\genomics_core\\\\src\\\\pages\\\\Dashboard.js\";\nimport { Helmet } from 'react-helmet';\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, getDocs, query, where } from 'firebase/firestore';\nimport { MaterialTable } from 'material-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getSamples = async () => {\n  initializeApp({\n    apiKey: 'AIzaSyC64KY9UehoX2fk7Ugw2XNPvG4zZ7sSdsQ',\n    authDomain: 'uno-genomics.firebaseapp.com',\n    databaseURL: 'https://uno-genomics-default-rtdb.firebaseio.com',\n    projectId: 'uno-genomics',\n    storageBucket: 'uno-genomics.appspot.com',\n    messagingSenderId: '351603848354',\n    appId: '1:351603848354:web:e974a024da6b7e7472d3fb'\n  });\n  const samplesCollection = collection(getFirestore(), 'samples');\n  const samples = [];\n  let id = 0;\n\n  if (localStorage.getItem('isAdmin') === 'true') {\n    const querySnapshot = await getDocs(samplesCollection);\n    querySnapshot.forEach(doc => {\n      id++;\n      const sample = {\n        id,\n        name: doc.get('name'),\n        stage: doc.get('stage'),\n        submissionDate: doc.get('submissionDate'),\n        completionDateEstimate: doc.get('completionDateEstimate')\n      };\n      samples.push(sample);\n    });\n  } else {\n    const querySnapshot = await getDocs(query(samplesCollection, where('userID', '==', localStorage.getItem('userID'))));\n    querySnapshot.forEach(doc => {\n      const sample = {\n        id,\n        name: doc.get('name'),\n        stage: doc.get('stage'),\n        submissionDate: doc.get('submissionDate'),\n        completionDateEstimate: doc.get('completionDateEstimate')\n      };\n      samples.push(sample);\n    });\n  }\n\n  return samples;\n};\n\nconst Dashboard = () => {\n  const samples = getSamples();\n  const columns = [{\n    title: 'name',\n    field: 'Name'\n  }, {\n    title: 'stage',\n    field: 'Stage'\n  }, {\n    title: 'submissionDate',\n    field: 'Date of Submission'\n  }, {\n    title: 'completionDateEstimate',\n    field: 'Estimated Completion Date'\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \" UNO COVID Resources Collection \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MaterialTable, {\n      columns: columns,\n      data: samples,\n      title: \"Samples\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/bfehr/dev/genomics_core/src/pages/Dashboard.js"],"names":["Helmet","initializeApp","getFirestore","collection","getDocs","query","where","MaterialTable","getSamples","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","samplesCollection","samples","id","localStorage","getItem","querySnapshot","forEach","doc","sample","name","get","stage","submissionDate","completionDateEstimate","push","Dashboard","columns","title","field"],"mappings":"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","sourcesContent":["import { Helmet } from 'react-helmet';\r\nimport { initializeApp } from 'firebase/app';\r\nimport {\r\n  getFirestore, collection, getDocs, query, where\r\n} from 'firebase/firestore';\r\nimport { MaterialTable } from 'material-table';\r\n\r\nconst getSamples = async () => {\r\n  initializeApp({\r\n    apiKey: 'AIzaSyC64KY9UehoX2fk7Ugw2XNPvG4zZ7sSdsQ',\r\n    authDomain: 'uno-genomics.firebaseapp.com',\r\n    databaseURL: 'https://uno-genomics-default-rtdb.firebaseio.com',\r\n    projectId: 'uno-genomics',\r\n    storageBucket: 'uno-genomics.appspot.com',\r\n    messagingSenderId: '351603848354',\r\n    appId: '1:351603848354:web:e974a024da6b7e7472d3fb'\r\n  });\r\n\r\n  const samplesCollection = collection(getFirestore(), 'samples');\r\n  const samples = [];\r\n  let id = 0;\r\n  if (localStorage.getItem('isAdmin') === 'true') {\r\n    const querySnapshot = await getDocs(samplesCollection);\r\n    querySnapshot.forEach((doc) => {\r\n      id++;\r\n      const sample = {\r\n        id, name: doc.get('name'), stage: doc.get('stage'), submissionDate: doc.get('submissionDate'), completionDateEstimate: doc.get('completionDateEstimate')\r\n      };\r\n      samples.push(sample);\r\n    });\r\n  } else {\r\n    const querySnapshot = await getDocs(query(samplesCollection, where('userID', '==', localStorage.getItem('userID'))));\r\n    querySnapshot.forEach((doc) => {\r\n      const sample = {\r\n        id, name: doc.get('name'), stage: doc.get('stage'), submissionDate: doc.get('submissionDate'), completionDateEstimate: doc.get('completionDateEstimate')\r\n      };\r\n      samples.push(sample);\r\n    });\r\n  }\r\n\r\n  return samples;\r\n};\r\n\r\nconst Dashboard = () => {\r\n  const samples = getSamples();\r\n  const columns = [\r\n    { title: 'name', field: 'Name' },\r\n    { title: 'stage', field: 'Stage' },\r\n    { title: 'submissionDate', field: 'Date of Submission' },\r\n    { title: 'completionDateEstimate', field: 'Estimated Completion Date' },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> UNO COVID Resources Collection </title>\r\n      </Helmet>\r\n      <MaterialTable columns={columns} data={samples} title=\"Samples\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"]},"metadata":{},"sourceType":"module"}