{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bfehr\\\\dev\\\\genomics_core\\\\src\\\\components\\\\Samples.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, getDocs, query, where } from 'firebase/firestore';\nimport CSSBaseline from '@material-ui/core';\nimport { MaUTable, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core';\nimport { useTable } from 'react-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getSamples = async () => {\n  initializeApp({\n    apiKey: 'AIzaSyC64KY9UehoX2fk7Ugw2XNPvG4zZ7sSdsQ',\n    authDomain: 'uno-genomics.firebaseapp.com',\n    databaseURL: 'https://uno-genomics-default-rtdb.firebaseio.com',\n    projectId: 'uno-genomics',\n    storageBucket: 'uno-genomics.appspot.com',\n    messagingSenderId: '351603848354',\n    appId: '1:351603848354:web:e974a024da6b7e7472d3fb'\n  });\n  const samplesCollection = collection(getFirestore(), 'samples');\n  const samples = [];\n\n  if (localStorage.getItem('isAdmin') === 'true') {\n    const querySnapshot = await getDocs(samplesCollection);\n    querySnapshot.forEach(doc => {\n      samples.push(doc.data());\n    });\n  } else {\n    const querySnapshot = await getDocs(query(samplesCollection, where('userID', '==', localStorage.getItem('userID'))));\n    querySnapshot.forEach(doc => {\n      samples.push(doc.data());\n    });\n  }\n\n  return samples;\n};\n\nconst Samples = () => {\n  _s();\n\n  const columns = React.useMemo(() => [{\n    Header: 'name',\n    accessor: 'name'\n  }, {\n    Header: 'stage',\n    accessor: 'stage'\n  }, {\n    Header: 'date of submission',\n    accessor: 'submissionDate'\n  }, {\n    Header: 'estimated completion date',\n    accessor: 'completionDateEstimate'\n  }], []);\n  const [data, setData] = React.useState(React.useMemo(() => [getSamples()]));\n  const [skipPageReset, setSkipPageReset] = React.useState(false);\n\n  const updateMyData = (rowIndex, columnId, value) => {\n    setSkipPageReset(true);\n    setData(old => old.map((row, index) => {\n      if (index === rowIndex) {\n        return { ...old[rowIndex],\n          [columnId]: value\n        };\n      }\n\n      return row;\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(EnhancedTable, {\n      columns: columns,\n      data: data,\n      setData: setData,\n      updateMyData: updateMyData,\n      skipPageReset: skipPageReset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Samples, \"i6liJQm+gfrMn/ULrCqBw5wxkf0=\");\n\n_c = Samples;\nexport default Samples;\n\nvar _c;\n\n$RefreshReg$(_c, \"Samples\");","map":{"version":3,"sources":["C:/Users/bfehr/dev/genomics_core/src/components/Samples.js"],"names":["React","initializeApp","getFirestore","collection","getDocs","query","where","CSSBaseline","MaUTable","TableBody","TableCell","TableHead","TableRow","useTable","getSamples","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","samplesCollection","samples","localStorage","getItem","querySnapshot","forEach","doc","push","data","Samples","columns","useMemo","Header","accessor","setData","useState","skipPageReset","setSkipPageReset","updateMyData","rowIndex","columnId","value","old","map","row","index"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SACEC,YADF,EACgBC,UADhB,EAC4BC,OAD5B,EACqCC,KADrC,EAC4CC,KAD5C,QAEO,oBAFP;AAGA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,SACEC,QADF,EACYC,SADZ,EACuBC,SADvB,EACkCC,SADlC,EAC6CC,QAD7C,QAEO,mBAFP;AAGA,SAASC,QAAT,QAAyB,aAAzB;;;AAEA,MAAMC,UAAU,GAAG,YAAY;AAC7Bb,EAAAA,aAAa,CAAC;AACZc,IAAAA,MAAM,EAAE,yCADI;AAEZC,IAAAA,UAAU,EAAE,8BAFA;AAGZC,IAAAA,WAAW,EAAE,kDAHD;AAIZC,IAAAA,SAAS,EAAE,cAJC;AAKZC,IAAAA,aAAa,EAAE,0BALH;AAMZC,IAAAA,iBAAiB,EAAE,cANP;AAOZC,IAAAA,KAAK,EAAE;AAPK,GAAD,CAAb;AAUA,QAAMC,iBAAiB,GAAGnB,UAAU,CAACD,YAAY,EAAb,EAAiB,SAAjB,CAApC;AACA,QAAMqB,OAAO,GAAG,EAAhB;;AAEA,MAAIC,YAAY,CAACC,OAAb,CAAqB,SAArB,MAAoC,MAAxC,EAAgD;AAC9C,UAAMC,aAAa,GAAG,MAAMtB,OAAO,CAACkB,iBAAD,CAAnC;AACAI,IAAAA,aAAa,CAACC,OAAd,CAAuBC,GAAD,IAAS;AAC7BL,MAAAA,OAAO,CAACM,IAAR,CAAaD,GAAG,CAACE,IAAJ,EAAb;AACD,KAFD;AAGD,GALD,MAKO;AACL,UAAMJ,aAAa,GAAG,MAAMtB,OAAO,CAACC,KAAK,CAACiB,iBAAD,EAAoBhB,KAAK,CAAC,QAAD,EAAW,IAAX,EAAiBkB,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAjB,CAAzB,CAAN,CAAnC;AACAC,IAAAA,aAAa,CAACC,OAAd,CAAuBC,GAAD,IAAS;AAC7BL,MAAAA,OAAO,CAACM,IAAR,CAAaD,GAAG,CAACE,IAAJ,EAAb;AACD,KAFD;AAGD;;AAED,SAAOP,OAAP;AACD,CA3BD;;AA6BA,MAAMQ,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAMC,OAAO,GAAGhC,KAAK,CAACiC,OAAN,CAAc,MAAM,CAClC;AAAEC,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,QAAQ,EAAE;AAA5B,GADkC,EAElC;AAAED,IAAAA,MAAM,EAAE,OAAV;AAAmBC,IAAAA,QAAQ,EAAE;AAA7B,GAFkC,EAGlC;AAAED,IAAAA,MAAM,EAAE,oBAAV;AAAgCC,IAAAA,QAAQ,EAAE;AAA1C,GAHkC,EAIlC;AAAED,IAAAA,MAAM,EAAE,2BAAV;AAAuCC,IAAAA,QAAQ,EAAE;AAAjD,GAJkC,CAApB,EAMhB,EANgB,CAAhB;AAQA,QAAM,CAACL,IAAD,EAAOM,OAAP,IAAkBpC,KAAK,CAACqC,QAAN,CAAerC,KAAK,CAACiC,OAAN,CAAc,MAAM,CAACnB,UAAU,EAAX,CAApB,CAAf,CAAxB;AACA,QAAM,CAACwB,aAAD,EAAgBC,gBAAhB,IAAoCvC,KAAK,CAACqC,QAAN,CAAe,KAAf,CAA1C;;AAEA,QAAMG,YAAY,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqBC,KAArB,KAA+B;AAClDJ,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAH,IAAAA,OAAO,CAAEQ,GAAD,IAASA,GAAG,CAACC,GAAJ,CAAQ,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACvC,UAAIA,KAAK,KAAKN,QAAd,EAAwB;AACtB,eAAO,EACL,GAAGG,GAAG,CAACH,QAAD,CADD;AAEL,WAACC,QAAD,GAAYC;AAFP,SAAP;AAID;;AACD,aAAOG,GAAP;AACD,KARgB,CAAV,CAAP;AASD,GAXD;;AAYA,sBACE;AAAA,2BACE,QAAC,aAAD;AAAe,MAAA,OAAO,EAAEd,OAAxB;AAAiC,MAAA,IAAI,EAAEF,IAAvC;AAA6C,MAAA,OAAO,EAAEM,OAAtD;AAA+D,MAAA,YAAY,EAAEI,YAA7E;AAA2F,MAAA,aAAa,EAAEF;AAA1G;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA7BD;;GAAMP,O;;KAAAA,O;AA+BN,eAAeA,OAAf","sourcesContent":["import React from 'react';\r\nimport { initializeApp } from 'firebase/app';\r\nimport {\r\n  getFirestore, collection, getDocs, query, where\r\n} from 'firebase/firestore';\r\nimport CSSBaseline from '@material-ui/core';\r\nimport {\r\n  MaUTable, TableBody, TableCell, TableHead, TableRow\r\n} from '@material-ui/core';\r\nimport { useTable } from 'react-table';\r\n\r\nconst getSamples = async () => {\r\n  initializeApp({\r\n    apiKey: 'AIzaSyC64KY9UehoX2fk7Ugw2XNPvG4zZ7sSdsQ',\r\n    authDomain: 'uno-genomics.firebaseapp.com',\r\n    databaseURL: 'https://uno-genomics-default-rtdb.firebaseio.com',\r\n    projectId: 'uno-genomics',\r\n    storageBucket: 'uno-genomics.appspot.com',\r\n    messagingSenderId: '351603848354',\r\n    appId: '1:351603848354:web:e974a024da6b7e7472d3fb'\r\n  });\r\n\r\n  const samplesCollection = collection(getFirestore(), 'samples');\r\n  const samples = [];\r\n\r\n  if (localStorage.getItem('isAdmin') === 'true') {\r\n    const querySnapshot = await getDocs(samplesCollection);\r\n    querySnapshot.forEach((doc) => {\r\n      samples.push(doc.data());\r\n    });\r\n  } else {\r\n    const querySnapshot = await getDocs(query(samplesCollection, where('userID', '==', localStorage.getItem('userID'))));\r\n    querySnapshot.forEach((doc) => {\r\n      samples.push(doc.data());\r\n    });\r\n  }\r\n\r\n  return samples;\r\n};\r\n\r\nconst Samples = () => {\r\n  const columns = React.useMemo(() => [\r\n    { Header: 'name', accessor: 'name' },\r\n    { Header: 'stage', accessor: 'stage' },\r\n    { Header: 'date of submission', accessor: 'submissionDate' },\r\n    { Header: 'estimated completion date', accessor: 'completionDateEstimate' },\r\n  ],\r\n  []);\r\n\r\n  const [data, setData] = React.useState(React.useMemo(() => [getSamples()]));\r\n  const [skipPageReset, setSkipPageReset] = React.useState(false);\r\n\r\n  const updateMyData = (rowIndex, columnId, value) => {\r\n    setSkipPageReset(true);\r\n    setData((old) => old.map((row, index) => {\r\n      if (index === rowIndex) {\r\n        return {\r\n          ...old[rowIndex],\r\n          [columnId]: value,\r\n        };\r\n      }\r\n      return row;\r\n    }));\r\n  };\r\n  return (\r\n    <div>\r\n      <EnhancedTable columns={columns} data={data} setData={setData} updateMyData={updateMyData} skipPageReset={skipPageReset} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Samples;\r\n"]},"metadata":{},"sourceType":"module"}