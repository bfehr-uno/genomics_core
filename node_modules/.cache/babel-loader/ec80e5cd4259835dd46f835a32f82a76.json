{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bfehr\\\\dev\\\\genomics_core\\\\src\\\\components\\\\Samples.js\";\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, getDocs, query, where } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getSamples = async () => {\n  initializeApp({\n    apiKey: 'AIzaSyC64KY9UehoX2fk7Ugw2XNPvG4zZ7sSdsQ',\n    authDomain: 'uno-genomics.firebaseapp.com',\n    databaseURL: 'https://uno-genomics-default-rtdb.firebaseio.com',\n    projectId: 'uno-genomics',\n    storageBucket: 'uno-genomics.appspot.com',\n    messagingSenderId: '351603848354',\n    appId: '1:351603848354:web:e974a024da6b7e7472d3fb'\n  });\n  const samplesCollection = collection(getFirestore(), 'samples');\n  const samples = [];\n\n  if (localStorage.getItem('isAdmin') === 'true') {\n    console.log('hitting2');\n    const querySnapshot = await getDocs(samplesCollection);\n    console.log(querySnapshot.length);\n    querySnapshot.forEach(doc => {\n      samples.push(doc.data());\n    });\n  } else {\n    const querySnapshot = await getDocs(query(samplesCollection, where('userID', '==', localStorage.getItem('userID'))));\n    querySnapshot.forEach(doc => {\n      samples.push(doc.data());\n    });\n  }\n\n  return samples;\n};\n\nconst Samples = () => {\n  const samples = Array.from(getSamples());\n  console.log(samples.length);\n  samples.forEach(sample => {\n    console.log(sample.name);\n  });\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Sample Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Date Submitted\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Stage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Estimated Time of Completion\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: samples.forEach(sample => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: sample.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: sample.submissionDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: sample.stage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: sample.eta\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Samples;\nexport default Samples;\n\nvar _c;\n\n$RefreshReg$(_c, \"Samples\");","map":{"version":3,"sources":["C:/Users/bfehr/dev/genomics_core/src/components/Samples.js"],"names":["Table","TableBody","TableCell","TableContainer","TableHead","TableRow","initializeApp","getFirestore","collection","getDocs","query","where","getSamples","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","samplesCollection","samples","localStorage","getItem","console","log","querySnapshot","length","forEach","doc","push","data","Samples","Array","from","sample","name","submissionDate","stage","eta"],"mappings":";AAAA,SACEA,KADF,EACSC,SADT,EACoBC,SADpB,EAC+BC,cAD/B,EAC+CC,SAD/C,EAC0DC,QAD1D,QAEO,mBAFP;AAGA,SAASC,aAAT,QAA8B,cAA9B;AACA,SACEC,YADF,EACgBC,UADhB,EAC4BC,OAD5B,EACqCC,KADrC,EAC4CC,KAD5C,QAEO,oBAFP;;;AAIA,MAAMC,UAAU,GAAG,YAAY;AAC7BN,EAAAA,aAAa,CAAC;AACZO,IAAAA,MAAM,EAAE,yCADI;AAEZC,IAAAA,UAAU,EAAE,8BAFA;AAGZC,IAAAA,WAAW,EAAE,kDAHD;AAIZC,IAAAA,SAAS,EAAE,cAJC;AAKZC,IAAAA,aAAa,EAAE,0BALH;AAMZC,IAAAA,iBAAiB,EAAE,cANP;AAOZC,IAAAA,KAAK,EAAE;AAPK,GAAD,CAAb;AAUA,QAAMC,iBAAiB,GAAGZ,UAAU,CAACD,YAAY,EAAb,EAAiB,SAAjB,CAApC;AACA,QAAMc,OAAO,GAAG,EAAhB;;AAEA,MAAIC,YAAY,CAACC,OAAb,CAAqB,SAArB,MAAoC,MAAxC,EAAgD;AAC9CC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,UAAMC,aAAa,GAAG,MAAMjB,OAAO,CAACW,iBAAD,CAAnC;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYC,aAAa,CAACC,MAA1B;AACAD,IAAAA,aAAa,CAACE,OAAd,CAAuBC,GAAD,IAAS;AAC7BR,MAAAA,OAAO,CAACS,IAAR,CAAaD,GAAG,CAACE,IAAJ,EAAb;AACD,KAFD;AAGD,GAPD,MAOO;AACL,UAAML,aAAa,GAAG,MAAMjB,OAAO,CAACC,KAAK,CAACU,iBAAD,EAAoBT,KAAK,CAAC,QAAD,EAAW,IAAX,EAAiBW,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAjB,CAAzB,CAAN,CAAnC;AACAG,IAAAA,aAAa,CAACE,OAAd,CAAuBC,GAAD,IAAS;AAC7BR,MAAAA,OAAO,CAACS,IAAR,CAAaD,GAAG,CAACE,IAAJ,EAAb;AACD,KAFD;AAGD;;AAED,SAAOV,OAAP;AACD,CA7BD;;AA+BA,MAAMW,OAAO,GAAG,MAAM;AACpB,QAAMX,OAAO,GAAGY,KAAK,CAACC,IAAN,CAAWtB,UAAU,EAArB,CAAhB;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAO,CAACM,MAApB;AACAN,EAAAA,OAAO,CAACO,OAAR,CAAiBO,MAAD,IAAY;AAC1BX,IAAAA,OAAO,CAACC,GAAR,CAAYU,MAAM,CAACC,IAAnB;AACD,GAFD;AAIA,sBACE,QAAC,cAAD;AAAA,2BACE,QAAC,KAAD;AAAA,8BACE,QAAC,SAAD;AAAA,+BACE,QAAC,QAAD;AAAA,kCACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eASE,QAAC,SAAD;AAAA,kBACIf,OAAO,CAACO,OAAR,CAAiBO,MAAD,iBAChB,QAAC,QAAD;AAAA,kCACE,QAAC,SAAD;AAAA,sBAAYA,MAAM,CAACC;AAAnB;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,SAAD;AAAA,sBAAYD,MAAM,CAACE;AAAnB;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE,QAAC,SAAD;AAAA,sBAAYF,MAAM,CAACG;AAAnB;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE,QAAC,SAAD;AAAA,sBAAYH,MAAM,CAACI;AAAnB;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA;AADJ;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD,CA/BD;;KAAMP,O;AAiCN,eAAeA,OAAf","sourcesContent":["import {\r\n  Table, TableBody, TableCell, TableContainer, TableHead, TableRow\r\n} from '@material-ui/core';\r\nimport { initializeApp } from 'firebase/app';\r\nimport {\r\n  getFirestore, collection, getDocs, query, where\r\n} from 'firebase/firestore';\r\n\r\nconst getSamples = async () => {\r\n  initializeApp({\r\n    apiKey: 'AIzaSyC64KY9UehoX2fk7Ugw2XNPvG4zZ7sSdsQ',\r\n    authDomain: 'uno-genomics.firebaseapp.com',\r\n    databaseURL: 'https://uno-genomics-default-rtdb.firebaseio.com',\r\n    projectId: 'uno-genomics',\r\n    storageBucket: 'uno-genomics.appspot.com',\r\n    messagingSenderId: '351603848354',\r\n    appId: '1:351603848354:web:e974a024da6b7e7472d3fb'\r\n  });\r\n\r\n  const samplesCollection = collection(getFirestore(), 'samples');\r\n  const samples = [];\r\n\r\n  if (localStorage.getItem('isAdmin') === 'true') {\r\n    console.log('hitting2');\r\n    const querySnapshot = await getDocs(samplesCollection);\r\n    console.log(querySnapshot.length);\r\n    querySnapshot.forEach((doc) => {\r\n      samples.push(doc.data());\r\n    });\r\n  } else {\r\n    const querySnapshot = await getDocs(query(samplesCollection, where('userID', '==', localStorage.getItem('userID'))));\r\n    querySnapshot.forEach((doc) => {\r\n      samples.push(doc.data());\r\n    });\r\n  }\r\n\r\n  return samples;\r\n};\r\n\r\nconst Samples = () => {\r\n  const samples = Array.from(getSamples());\r\n  console.log(samples.length);\r\n  samples.forEach((sample) => {\r\n    console.log(sample.name);\r\n  });\r\n\r\n  return (\r\n    <TableContainer>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Sample Name</TableCell>\r\n            <TableCell>Date Submitted</TableCell>\r\n            <TableCell>Stage</TableCell>\r\n            <TableCell>Estimated Time of Completion</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          { samples.forEach((sample) => (\r\n            <TableRow>\r\n              <TableCell>{sample.name}</TableCell>\r\n              <TableCell>{sample.submissionDate}</TableCell>\r\n              <TableCell>{sample.stage}</TableCell>\r\n              <TableCell>{sample.eta}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default Samples;\r\n"]},"metadata":{},"sourceType":"module"}