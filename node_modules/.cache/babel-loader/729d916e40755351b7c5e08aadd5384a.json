{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bfehr\\\\dev\\\\genomics_core\\\\src\\\\components\\\\table\\\\EnhancedTable.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MaUTable from '@material-ui/core/Table';\nimport PropTypes from 'prop-types';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport { useGlobalFilter, usePagination, useRowSelect, useSortBy, useTable } from 'react-table';\nimport TableToolbar from './TableToolbar';\nimport TablePaginationActions from './TablePaginationActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst IndeterminateCheckbox = /*#__PURE__*/React.forwardRef(_c = _s(({\n  indeterminate,\n  ...rest\n}, ref) => {\n  _s();\n\n  const defaultRef = React.useRef();\n  const resolvedRef = ref || defaultRef;\n  React.useEffect(() => {\n    resolvedRef.current.indeterminate = indeterminate;\n  }, [resolvedRef, indeterminate]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Checkbox, {\n      ref: resolvedRef,\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}, \"ouw4KVvDKeit07oEcYWUcp3TdOA=\"));\n_c2 = IndeterminateCheckbox;\nconst inputStyle = {\n  padding: 0,\n  margin: 0,\n  border: 0,\n  background: 'transparent'\n};\n\nconst EditableCell = ({\n  value: initialValue,\n  row: {\n    index\n  },\n  column: {\n    id\n  },\n  updateMyData\n}) => {\n  _s2();\n\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n\n  const onBlur = () => {\n    updateMyData(index, id, value);\n  };\n\n  React.useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    style: inputStyle,\n    value: value,\n    onChange: onChange,\n    onBlur: onBlur\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(EditableCell, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c3 = EditableCell;\nEditableCell.propTypes = {\n  cell: PropTypes.shape({\n    value: PropTypes.any.isRequired\n  }),\n  row: PropTypes.shape({\n    index: PropTypes.number.isRequired\n  }),\n  column: PropTypes.shape({\n    id: PropTypes.number.isRequired\n  }),\n  updateMyData: PropTypes.func.isRequired\n}; // Set our editable cell renderer as the default Cell renderer\n\nconst defaultColumn = {\n  Cell: EditableCell\n};\n\nconst EnhancedTable = ({\n  columns,\n  data,\n  setData,\n  updateMyData,\n  skipPageReset\n}) => {\n  _s3();\n\n  const {\n    getTableProps,\n    headerGroups,\n    prepareRow,\n    page,\n    gotoPage,\n    setPageSize,\n    preGlobalFilteredRows,\n    setGlobalFilter,\n    state: {\n      pageIndex,\n      pageSize,\n      selectedRowIds,\n      globalFilter\n    }\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    autoResetPage: !skipPageReset,\n    // updateMyData isn't part of the API, but\n    // anything we put into these options will\n    // automatically be available on the instance.\n    // That way we can call this function from our\n    // cell renderer!\n    updateMyData\n  }, useGlobalFilter, useSortBy, usePagination, useRowSelect, hooks => {\n    hooks.allColumns.push(columns => [// Let's make a column for selection\n    {\n      id: 'selection',\n      // The header can use the table's getToggleAllRowsSelectedProps method\n      // to render a checkbox.  Pagination is a problem since this will select all\n      // rows even though not all rows are on the current page.  The solution should\n      // be server side pagination.  For one, the clients should not download all\n      // rows in most cases.  The client should only download data for the current page.\n      // In that case, getToggleAllRowsSelectedProps works fine.\n      Header: ({\n        getToggleAllRowsSelectedProps\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(IndeterminateCheckbox, { ...getToggleAllRowsSelectedProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }, this),\n      // The cell can use the individual row's getToggleRowSelectedProps method\n      // to the render a checkbox\n      Cell: ({\n        row\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(IndeterminateCheckbox, { ...row.getToggleRowSelectedProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this)\n    }, ...columns]);\n  });\n\n  const handleChangePage = (event, newPage) => {\n    gotoPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setPageSize(Number(event.target.value));\n  };\n\n  const removeByIndexs = (array, indexs) => array.filter((_, i) => !indexs.includes(i));\n\n  const deleteUserHandler = event => {\n    const newData = removeByIndexs(data, Object.keys(selectedRowIds).map(x => parseInt(x, 10)));\n    setData(newData);\n  };\n\n  const addUserHandler = user => {\n    const newData = data.concat([user]);\n    setData(newData);\n  }; // Render the UI for your table\n\n\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    children: [/*#__PURE__*/_jsxDEV(TableToolbar, {\n      numSelected: Object.keys(selectedRowIds).length,\n      deleteUserHandler: deleteUserHandler,\n      addUserHandler: addUserHandler,\n      preGlobalFilteredRows: preGlobalFilteredRows,\n      setGlobalFilter: setGlobalFilter,\n      globalFilter: globalFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MaUTable, { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(TableRow, { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(TableCell, { ...(column.id === 'selection' ? column.getHeaderProps() : column.getHeaderProps(column.getSortByToggleProps())),\n            children: [column.render('Header'), column.id !== 'selection' ? /*#__PURE__*/_jsxDEV(TableSortLabel, {\n              active: column.isSorted // react-table has a unsorted state which is not treated here\n              ,\n              direction: column.isSortedDesc ? 'desc' : 'asc'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 21\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: page.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(TableRow, { ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(TableCell, { ...cell.getCellProps(),\n                children: cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableFooter, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: /*#__PURE__*/_jsxDEV(TablePagination, {\n            rowsPerPageOptions: [5, 10, 25, {\n              label: 'All',\n              value: data.length\n            }],\n            colSpan: 3,\n            count: data.length,\n            rowsPerPage: pageSize,\n            page: pageIndex,\n            SelectProps: {\n              inputProps: {\n                'aria-label': 'rows per page'\n              },\n              native: true\n            },\n            onChangePage: handleChangePage,\n            onChangeRowsPerPage: handleChangeRowsPerPage,\n            ActionsComponent: TablePaginationActions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n\n_s3(EnhancedTable, \"Hzb8wYHX8EYAQeW8DCgjzQ+WAxg=\", false, function () {\n  return [useTable];\n});\n\n_c4 = EnhancedTable;\nEnhancedTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  data: PropTypes.array.isRequired,\n  updateMyData: PropTypes.func.isRequired,\n  setData: PropTypes.func.isRequired,\n  skipPageReset: PropTypes.bool.isRequired\n};\nexport default EnhancedTable;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"IndeterminateCheckbox$React.forwardRef\");\n$RefreshReg$(_c2, \"IndeterminateCheckbox\");\n$RefreshReg$(_c3, \"EditableCell\");\n$RefreshReg$(_c4, \"EnhancedTable\");","map":{"version":3,"sources":["C:/Users/bfehr/dev/genomics_core/src/components/table/EnhancedTable.js"],"names":["React","Checkbox","MaUTable","PropTypes","TableBody","TableCell","TableContainer","TableFooter","TableHead","TablePagination","TableRow","TableSortLabel","useGlobalFilter","usePagination","useRowSelect","useSortBy","useTable","TableToolbar","TablePaginationActions","IndeterminateCheckbox","forwardRef","indeterminate","rest","ref","defaultRef","useRef","resolvedRef","useEffect","current","inputStyle","padding","margin","border","background","EditableCell","value","initialValue","row","index","column","id","updateMyData","onChange","e","setValue","target","onBlur","propTypes","cell","shape","any","isRequired","number","func","defaultColumn","Cell","EnhancedTable","columns","data","setData","skipPageReset","getTableProps","headerGroups","prepareRow","page","gotoPage","setPageSize","preGlobalFilteredRows","setGlobalFilter","state","pageIndex","pageSize","selectedRowIds","globalFilter","autoResetPage","hooks","allColumns","push","Header","getToggleAllRowsSelectedProps","getToggleRowSelectedProps","handleChangePage","event","newPage","handleChangeRowsPerPage","Number","removeByIndexs","array","indexs","filter","_","i","includes","deleteUserHandler","newData","Object","keys","map","x","parseInt","addUserHandler","user","concat","length","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","getRowProps","cells","getCellProps","label","inputProps","native","bool"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport MaUTable from '@material-ui/core/Table';\r\nimport PropTypes from 'prop-types';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport {\r\n  useGlobalFilter,\r\n  usePagination,\r\n  useRowSelect,\r\n  useSortBy,\r\n  useTable,\r\n} from 'react-table';\r\nimport TableToolbar from './TableToolbar';\r\nimport TablePaginationActions from './TablePaginationActions';\r\n\r\nconst IndeterminateCheckbox = React.forwardRef(\r\n  ({ indeterminate, ...rest }, ref) => {\r\n    const defaultRef = React.useRef();\r\n    const resolvedRef = ref || defaultRef;\r\n    React.useEffect(() => {\r\n    resolvedRef.current.indeterminate = indeterminate;\r\n    }, [resolvedRef, indeterminate]);\r\n\r\n    return (\r\n      <>\r\n        <Checkbox ref={resolvedRef} {...rest} />\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nconst inputStyle = {\r\n  padding: 0,\r\n  margin: 0,\r\n  border: 0, \r\n  background: 'transparent',\r\n}\r\n\r\nconst EditableCell = ({\r\n  value: initialValue,\r\n  row: { index },\r\n  column: { id },\r\n  updateMyData,\r\n}) => {\r\n  const onChange = e => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const onBlur = () => {\r\n    updateMyData(index, id, value)\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    setValue(initialValue)\r\n  }, [initialValue]);\r\n\r\n  return (\r\n    <input\r\n      style={inputStyle}\r\n      value={value}\r\n      onChange={onChange}\r\n      onBlur={onBlur}\r\n    />\r\n  );\r\n}\r\n\r\nEditableCell.propTypes = {\r\n  cell: PropTypes.shape({\r\n    value: PropTypes.any.isRequired,\r\n  }),\r\n  row: PropTypes.shape({\r\n    index: PropTypes.number.isRequired,\r\n  }),\r\n  column: PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n  }),\r\n  updateMyData: PropTypes.func.isRequired,\r\n};\r\n\r\n// Set our editable cell renderer as the default Cell renderer\r\nconst defaultColumn = {\r\n  Cell: EditableCell,\r\n};\r\n\r\nconst EnhancedTable = ({\r\n  columns,\r\n  data,\r\n  setData,\r\n  updateMyData,\r\n  skipPageReset,\r\n}) => {\r\n  const {\r\n    getTableProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    gotoPage,\r\n    setPageSize,\r\n    preGlobalFilteredRows,\r\n    setGlobalFilter,\r\n    state: { pageIndex, pageSize, selectedRowIds, globalFilter },\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      defaultColumn,\r\n      autoResetPage: !skipPageReset,\r\n      // updateMyData isn't part of the API, but\r\n      // anything we put into these options will\r\n      // automatically be available on the instance.\r\n      // That way we can call this function from our\r\n      // cell renderer!\r\n      updateMyData,\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination,\r\n    useRowSelect,\r\n    hooks => {\r\n      hooks.allColumns.push(columns => [\r\n        // Let's make a column for selection\r\n        {\r\n          id: 'selection',\r\n          // The header can use the table's getToggleAllRowsSelectedProps method\r\n          // to render a checkbox.  Pagination is a problem since this will select all\r\n          // rows even though not all rows are on the current page.  The solution should\r\n          // be server side pagination.  For one, the clients should not download all\r\n          // rows in most cases.  The client should only download data for the current page.\r\n          // In that case, getToggleAllRowsSelectedProps works fine.\r\n          Header: ({ getToggleAllRowsSelectedProps }) => (\r\n            <div>\r\n              <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\r\n            </div>\r\n          ),\r\n          // The cell can use the individual row's getToggleRowSelectedProps method\r\n          // to the render a checkbox\r\n          Cell: ({ row }) => (\r\n            <div>\r\n              <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\r\n            </div>\r\n          ),\r\n        },\r\n        ...columns,\r\n      ])\r\n    }\r\n  );\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    gotoPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = event => {\r\n    setPageSize(Number(event.target.value));\r\n  };\r\n\r\n  const removeByIndexs = (array, indexs) =>\r\n    array.filter((_, i) => !indexs.includes(i));\r\n\r\n  const deleteUserHandler = event => {\r\n    const newData = removeByIndexs(\r\n      data,\r\n      Object.keys(selectedRowIds).map(x => parseInt(x, 10))\r\n    );\r\n    setData(newData);\r\n  };\r\n\r\n  const addUserHandler = user => {\r\n    const newData = data.concat([user]);\r\n    setData(newData);\r\n  };\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <TableContainer>\r\n      <TableToolbar\r\n        numSelected={Object.keys(selectedRowIds).length}\r\n        deleteUserHandler={deleteUserHandler}\r\n        addUserHandler={addUserHandler}\r\n        preGlobalFilteredRows={preGlobalFilteredRows}\r\n        setGlobalFilter={setGlobalFilter}\r\n        globalFilter={globalFilter}\r\n      />\r\n      <MaUTable {...getTableProps()}>\r\n        <TableHead>\r\n          {headerGroups.map(headerGroup => (\r\n            <TableRow {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <TableCell\r\n                  {...(column.id === 'selection'\r\n                    ? column.getHeaderProps()\r\n                    : column.getHeaderProps(column.getSortByToggleProps()))}\r\n                >\r\n                  {column.render('Header')}\r\n                  {column.id !== 'selection' ? (\r\n                    <TableSortLabel\r\n                      active={column.isSorted}\r\n                      // react-table has a unsorted state which is not treated here\r\n                      direction={column.isSortedDesc ? 'desc' : 'asc'}\r\n                    />\r\n                  ) : null}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          ))}\r\n        </TableHead>\r\n        <TableBody>\r\n          {page.map((row, i) => {\r\n            prepareRow(row)\r\n            return (\r\n              <TableRow {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return (\r\n                    <TableCell {...cell.getCellProps()}>\r\n                      {cell.render('Cell')}\r\n                    </TableCell>\r\n                  )\r\n                })}\r\n              </TableRow>\r\n            )\r\n          })}\r\n        </TableBody>\r\n\r\n        <TableFooter>\r\n          <TableRow>\r\n            <TablePagination\r\n              rowsPerPageOptions={[\r\n                5,\r\n                10,\r\n                25,\r\n                { label: 'All', value: data.length },\r\n              ]}\r\n              colSpan={3}\r\n              count={data.length}\r\n              rowsPerPage={pageSize}\r\n              page={pageIndex}\r\n              SelectProps={{\r\n                inputProps: { 'aria-label': 'rows per page' },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              ActionsComponent={TablePaginationActions}\r\n            />\r\n          </TableRow>\r\n        </TableFooter>\r\n      </MaUTable>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nEnhancedTable.propTypes = {\r\n  columns: PropTypes.array.isRequired,\r\n  data: PropTypes.array.isRequired,\r\n  updateMyData: PropTypes.func.isRequired,\r\n  setData: PropTypes.func.isRequired,\r\n  skipPageReset: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default EnhancedTable;\r\n"]},"metadata":{},"sourceType":"module"}