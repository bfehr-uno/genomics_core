{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bfehr\\\\dev\\\\genomics_core\\\\src\\\\components\\\\client\\\\Samples.js\";\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport { getDocs, doc, query, where, collection } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getSamples = () => {\n  const firebaseConfig = initializeApp({\n    apiKey: 'AIzaSyC64KY9UehoX2fk7Ugw2XNPvG4zZ7sSdsQ',\n    authDomain: 'uno-genomics.firebaseapp.com',\n    databaseURL: 'https://uno-genomics-default-rtdb.firebaseio.com',\n    projectId: 'uno-genomics',\n    storageBucket: 'uno-genomics.appspot.com',\n    messagingSenderId: '351603848354',\n    appId: '1:351603848354:web:e974a024da6b7e7472d3fb'\n  });\n  const db = getFirestore();\n  const docRef = getDoc(db, \"clients\");\n\n  if (localStorage.getItem(\"adminMode\") == \"true\") {\n    const samples = getDoc(db, \"samples\", \"samples\");\n    this.setState({\n      samples: samples\n    });\n  } else {\n    const q = query(docRef, where(\"userID\", \"==\", localStorage.getItem(\"userID\")));\n    const samples = getDocs(q);\n    this.setState({\n      samples: samples\n    });\n  }\n};\n\nconst Samples = () => /*#__PURE__*/_jsxDEV(TableContainer, {\n  children: /*#__PURE__*/_jsxDEV(Table, {\n    children: [/*#__PURE__*/_jsxDEV(TableHead, {\n      children: /*#__PURE__*/_jsxDEV(TableRow, {\n        children: [/*#__PURE__*/_jsxDEV(TableCell, {\n          children: \"Sample Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          children: \"Date Submitted\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          children: \"Stage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          children: \"Estimated Time of Completion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n      children: getSamples.forEach(({\n        name,\n        submissionDate,\n        stage,\n        eta\n      }) => /*#__PURE__*/_jsxDEV(TableRow, {\n        children: [/*#__PURE__*/_jsxDEV(TableCell, {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          children: submissionDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          children: stage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          children: eta\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 35,\n  columnNumber: 3\n}, this);\n\n_c = Samples;\nexport default Samples;\n\nvar _c;\n\n$RefreshReg$(_c, \"Samples\");","map":{"version":3,"sources":["C:/Users/bfehr/dev/genomics_core/src/components/client/Samples.js"],"names":["Table","TableBody","TableCell","TableContainer","TableHead","TableRow","getDocs","doc","query","where","collection","getSamples","firebaseConfig","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","docRef","getDoc","localStorage","getItem","samples","setState","q","Samples","forEach","name","submissionDate","stage","eta"],"mappings":";AAAA,SACEA,KADF,EACSC,SADT,EACoBC,SADpB,EAC+BC,cAD/B,EAC+CC,SAD/C,EAC0DC,QAD1D,QAEO,mBAFP;AAGA,SAASC,OAAT,EAAkBC,GAAlB,EAAuBC,KAAvB,EAA8BC,KAA9B,EAAqCC,UAArC,QAAuD,oBAAvD;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACvB,QAAMC,cAAc,GAAGC,aAAa,CAAC;AACnCC,IAAAA,MAAM,EAAE,yCAD2B;AAEnCC,IAAAA,UAAU,EAAE,8BAFuB;AAGnCC,IAAAA,WAAW,EAAE,kDAHsB;AAInCC,IAAAA,SAAS,EAAE,cAJwB;AAKnCC,IAAAA,aAAa,EAAE,0BALoB;AAMnCC,IAAAA,iBAAiB,EAAE,cANgB;AAOnCC,IAAAA,KAAK,EAAE;AAP4B,GAAD,CAApC;AASA,QAAMC,EAAE,GAAGC,YAAY,EAAvB;AACA,QAAMC,MAAM,GAAGC,MAAM,CAACH,EAAD,EAAK,SAAL,CAArB;;AAEA,MAAII,YAAY,CAACC,OAAb,CAAqB,WAArB,KAAqC,MAAzC,EAAiD;AAC/C,UAAMC,OAAO,GAAGH,MAAM,CAACH,EAAD,EAAK,SAAL,EAAgB,SAAhB,CAAtB;AACA,SAAKO,QAAL,CAAc;AACZD,MAAAA,OAAO,EAAEA;AADG,KAAd;AAGD,GALD,MAKO;AACL,UAAME,CAAC,GAAGrB,KAAK,CAACe,MAAD,EAASd,KAAK,CAAC,QAAD,EAAW,IAAX,EAAiBgB,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAjB,CAAd,CAAf;AACA,UAAMC,OAAO,GAAGrB,OAAO,CAACuB,CAAD,CAAvB;AACA,SAAKD,QAAL,CAAc;AACZD,MAAAA,OAAO,EAAEA;AADG,KAAd;AAGD;AAEF,CA1BD;;AA4BA,MAAMG,OAAO,GAAG,mBACd,QAAC,cAAD;AAAA,yBACE,QAAC,KAAD;AAAA,4BACE,QAAC,SAAD;AAAA,6BACE,QAAC,QAAD;AAAA,gCACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,SAAD;AAAA,gBACInB,UAAU,CAACoB,OAAX,CAAmB,CAAC;AACpBC,QAAAA,IADoB;AACdC,QAAAA,cADc;AACEC,QAAAA,KADF;AACSC,QAAAA;AADT,OAAD,kBAGnB,QAAC,QAAD;AAAA,gCACE,QAAC,SAAD;AAAA,oBAAYH;AAAZ;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,SAAD;AAAA,oBAAYC;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,SAAD;AAAA,oBAAYC;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE,QAAC,SAAD;AAAA,oBAAYC;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHA;AADJ;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF;;KAAML,O;AA2BN,eAAeA,OAAf","sourcesContent":["import {\r\n  Table, TableBody, TableCell, TableContainer, TableHead, TableRow\r\n} from '@material-ui/core';\r\nimport { getDocs, doc, query, where, collection } from 'firebase/firestore';\r\n\r\nconst getSamples = () => {\r\n  const firebaseConfig = initializeApp({\r\n    apiKey: 'AIzaSyC64KY9UehoX2fk7Ugw2XNPvG4zZ7sSdsQ',\r\n    authDomain: 'uno-genomics.firebaseapp.com',\r\n    databaseURL: 'https://uno-genomics-default-rtdb.firebaseio.com',\r\n    projectId: 'uno-genomics',\r\n    storageBucket: 'uno-genomics.appspot.com',\r\n    messagingSenderId: '351603848354',\r\n    appId: '1:351603848354:web:e974a024da6b7e7472d3fb'\r\n  });\r\n  const db = getFirestore();\r\n  const docRef = getDoc(db, \"clients\");\r\n\r\n  if (localStorage.getItem(\"adminMode\") == \"true\") {\r\n    const samples = getDoc(db, \"samples\", \"samples\");\r\n    this.setState({\r\n      samples: samples\r\n    });\r\n  } else {\r\n    const q = query(docRef, where(\"userID\", \"==\", localStorage.getItem(\"userID\")));\r\n    const samples = getDocs(q);\r\n    this.setState({\r\n      samples: samples\r\n    });\r\n  }\r\n  \r\n}\r\n\r\nconst Samples = () => (\r\n  <TableContainer>\r\n    <Table>\r\n      <TableHead>\r\n        <TableRow>\r\n          <TableCell>Sample Name</TableCell>\r\n          <TableCell>Date Submitted</TableCell>\r\n          <TableCell>Stage</TableCell>\r\n          <TableCell>Estimated Time of Completion</TableCell>\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>\r\n        { getSamples.forEach(({\r\n          name, submissionDate, stage, eta\r\n        }) => (\r\n          <TableRow>\r\n            <TableCell>{name}</TableCell>\r\n            <TableCell>{submissionDate}</TableCell>\r\n            <TableCell>{stage}</TableCell>\r\n            <TableCell>{eta}</TableCell>\r\n          </TableRow>\r\n        ))}\r\n      </TableBody>\r\n    </Table>\r\n  </TableContainer>\r\n);\r\n\r\nexport default Samples;\r\n"]},"metadata":{},"sourceType":"module"}