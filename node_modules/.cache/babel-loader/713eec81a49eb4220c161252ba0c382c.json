{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bfehr\\\\dev\\\\genomics_core\\\\src\\\\components\\\\Samples.js\";\nimport { DataGrid } from '@mui/x-data-grid';\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, getDocs, query, where } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getSamples = async () => {\n  initializeApp({\n    apiKey: 'AIzaSyC64KY9UehoX2fk7Ugw2XNPvG4zZ7sSdsQ',\n    authDomain: 'uno-genomics.firebaseapp.com',\n    databaseURL: 'https://uno-genomics-default-rtdb.firebaseio.com',\n    projectId: 'uno-genomics',\n    storageBucket: 'uno-genomics.appspot.com',\n    messagingSenderId: '351603848354',\n    appId: '1:351603848354:web:e974a024da6b7e7472d3fb'\n  });\n  const samplesCollection = collection(getFirestore(), 'samples');\n  const samples = [];\n\n  if (localStorage.getItem('isAdmin') === 'true') {\n    const querySnapshot = await getDocs(samplesCollection);\n    querySnapshot.forEach(doc => {\n      samples.push(doc.data());\n    });\n  } else {\n    const querySnapshot = await getDocs(query(samplesCollection, where('userID', '==', localStorage.getItem('userID'))));\n    querySnapshot.forEach(doc => {\n      samples.push(doc.data());\n    });\n  }\n\n  return samples;\n};\n\nconst columns = [{\n  field: 'name',\n  headerName: 'Name',\n  width: 70\n}, {\n  field: 'stage',\n  headerName: 'stage',\n  width: 130\n}, {\n  field: 'submissionDate',\n  headerName: 'date of submission',\n  width: 130\n}, {\n  field: 'completionDateEstimate',\n  headerName: 'estimated completion date',\n  width: 130\n}];\n\nconst Samples = () => {\n  return /*#__PURE__*/_jsxDEV(DataGrid, {\n    rows: getSamples,\n    columns: columns,\n    pageSize: 10,\n    rowsPerPageOptions: [5],\n    checkboxSelection: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Samples;\nexport default Samples;\n\nvar _c;\n\n$RefreshReg$(_c, \"Samples\");","map":{"version":3,"sources":["C:/Users/bfehr/dev/genomics_core/src/components/Samples.js"],"names":["DataGrid","initializeApp","getFirestore","collection","getDocs","query","where","getSamples","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","samplesCollection","samples","localStorage","getItem","querySnapshot","forEach","doc","push","data","columns","field","headerName","width","Samples"],"mappings":";AAAA,SACEA,QADF,QAEO,kBAFP;AAGA,SAASC,aAAT,QAA8B,cAA9B;AACA,SACEC,YADF,EACgBC,UADhB,EAC4BC,OAD5B,EACqCC,KADrC,EAC4CC,KAD5C,QAEO,oBAFP;;;AAIA,MAAMC,UAAU,GAAG,YAAY;AAC7BN,EAAAA,aAAa,CAAC;AACZO,IAAAA,MAAM,EAAE,yCADI;AAEZC,IAAAA,UAAU,EAAE,8BAFA;AAGZC,IAAAA,WAAW,EAAE,kDAHD;AAIZC,IAAAA,SAAS,EAAE,cAJC;AAKZC,IAAAA,aAAa,EAAE,0BALH;AAMZC,IAAAA,iBAAiB,EAAE,cANP;AAOZC,IAAAA,KAAK,EAAE;AAPK,GAAD,CAAb;AAUA,QAAMC,iBAAiB,GAAGZ,UAAU,CAACD,YAAY,EAAb,EAAiB,SAAjB,CAApC;AACA,QAAMc,OAAO,GAAG,EAAhB;;AAEA,MAAIC,YAAY,CAACC,OAAb,CAAqB,SAArB,MAAoC,MAAxC,EAAgD;AAC9C,UAAMC,aAAa,GAAG,MAAMf,OAAO,CAACW,iBAAD,CAAnC;AACAI,IAAAA,aAAa,CAACC,OAAd,CAAuBC,GAAD,IAAS;AAC7BL,MAAAA,OAAO,CAACM,IAAR,CAAaD,GAAG,CAACE,IAAJ,EAAb;AACD,KAFD;AAGD,GALD,MAKO;AACL,UAAMJ,aAAa,GAAG,MAAMf,OAAO,CAACC,KAAK,CAACU,iBAAD,EAAoBT,KAAK,CAAC,QAAD,EAAW,IAAX,EAAiBW,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAjB,CAAzB,CAAN,CAAnC;AACAC,IAAAA,aAAa,CAACC,OAAd,CAAuBC,GAAD,IAAS;AAC7BL,MAAAA,OAAO,CAACM,IAAR,CAAaD,GAAG,CAACE,IAAJ,EAAb;AACD,KAFD;AAGD;;AAED,SAAOP,OAAP;AACD,CA3BD;;AA6BA,MAAMQ,OAAO,GAAG,CACd;AAAEC,EAAAA,KAAK,EAAE,MAAT;AAAiBC,EAAAA,UAAU,EAAE,MAA7B;AAAqCC,EAAAA,KAAK,EAAE;AAA5C,CADc,EAEd;AAAEF,EAAAA,KAAK,EAAE,OAAT;AAAkBC,EAAAA,UAAU,EAAE,OAA9B;AAAuCC,EAAAA,KAAK,EAAE;AAA9C,CAFc,EAGd;AAAEF,EAAAA,KAAK,EAAE,gBAAT;AAA2BC,EAAAA,UAAU,EAAE,oBAAvC;AAA6DC,EAAAA,KAAK,EAAE;AAApE,CAHc,EAId;AAAEF,EAAAA,KAAK,EAAE,wBAAT;AAAmCC,EAAAA,UAAU,EAAE,2BAA/C;AAA4EC,EAAAA,KAAK,EAAE;AAAnF,CAJc,CAAhB;;AAOA,MAAMC,OAAO,GAAG,MAAM;AACpB,sBACE,QAAC,QAAD;AAAU,IAAA,IAAI,EAAErB,UAAhB;AAA4B,IAAA,OAAO,EAAEiB,OAArC;AAA8C,IAAA,QAAQ,EAAE,EAAxD;AAA4D,IAAA,kBAAkB,EAAE,CAAC,CAAD,CAAhF;AAAqF,IAAA,iBAAiB;AAAtG;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CAJD;;KAAMI,O;AAMN,eAAeA,OAAf","sourcesContent":["import {\r\n  DataGrid\r\n} from '@mui/x-data-grid';\r\nimport { initializeApp } from 'firebase/app';\r\nimport {\r\n  getFirestore, collection, getDocs, query, where\r\n} from 'firebase/firestore';\r\n\r\nconst getSamples = async () => {\r\n  initializeApp({\r\n    apiKey: 'AIzaSyC64KY9UehoX2fk7Ugw2XNPvG4zZ7sSdsQ',\r\n    authDomain: 'uno-genomics.firebaseapp.com',\r\n    databaseURL: 'https://uno-genomics-default-rtdb.firebaseio.com',\r\n    projectId: 'uno-genomics',\r\n    storageBucket: 'uno-genomics.appspot.com',\r\n    messagingSenderId: '351603848354',\r\n    appId: '1:351603848354:web:e974a024da6b7e7472d3fb'\r\n  });\r\n\r\n  const samplesCollection = collection(getFirestore(), 'samples');\r\n  const samples = [];\r\n\r\n  if (localStorage.getItem('isAdmin') === 'true') {\r\n    const querySnapshot = await getDocs(samplesCollection);\r\n    querySnapshot.forEach((doc) => {\r\n      samples.push(doc.data());\r\n    });\r\n  } else {\r\n    const querySnapshot = await getDocs(query(samplesCollection, where('userID', '==', localStorage.getItem('userID'))));\r\n    querySnapshot.forEach((doc) => {\r\n      samples.push(doc.data());\r\n    });\r\n  }\r\n\r\n  return samples;\r\n};\r\n\r\nconst columns = [\r\n  { field: 'name', headerName: 'Name', width: 70 }, \r\n  { field: 'stage', headerName: 'stage', width: 130 },\r\n  { field: 'submissionDate', headerName: 'date of submission', width: 130 }, \r\n  { field: 'completionDateEstimate', headerName: 'estimated completion date', width: 130},\r\n];\r\n\r\nconst Samples = () => {\r\n  return (\r\n    <DataGrid rows={getSamples} columns={columns} pageSize={10} rowsPerPageOptions={[5]} checkboxSelection />\r\n  );\r\n};\r\n\r\nexport default Samples;\r\n"]},"metadata":{},"sourceType":"module"}