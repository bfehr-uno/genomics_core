{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bfehr\\\\dev\\\\genomics_core\\\\src\\\\pages\\\\Admin.js\";\nimport { Helmet } from 'react-helmet';\nimport { TableContainer, Table, TableHead, TableRow, TableCell, TableBody } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Admin = ({\n  samples\n}) => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(Helmet, {\n    children: /*#__PURE__*/_jsxDEV(\"title\", {\n      children: \"Customers | Material Kit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Sample Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Date Submitted\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Stage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Estimated Time of Completion\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: samples.array.forEach(({\n          name,\n          submissionDate,\n          stage,\n          eta\n        }) => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: submissionDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: stage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: eta\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this)]\n}, void 0, true);\n\n_c = Admin;\nAdmin.propTypes = {\n  samples: PropTypes.arrayOf(PropTypes.string)\n};\nexport default CustomerList;\n\nvar _c;\n\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"sources":["C:/Users/bfehr/dev/genomics_core/src/pages/Admin.js"],"names":["Helmet","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","PropTypes","Admin","samples","array","forEach","name","submissionDate","stage","eta","propTypes","arrayOf","string","CustomerList"],"mappings":";AAAA,SAASA,MAAT,QAAuB,cAAvB;AACA,SACEC,cADF,EACkBC,KADlB,EACyBC,SADzB,EACoCC,QADpC,EAC8CC,SAD9C,EACyDC,SADzD,QAEO,mBAFP;AAGA,OAAOC,SAAP,MAAsB,YAAtB;;;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,kBACZ;AAAA,0BACE,QAAC,MAAD;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF,eAIE,QAAC,cAAD;AAAA,2BACE,QAAC,KAAD;AAAA,8BACE,QAAC,SAAD;AAAA,+BACE,QAAC,QAAD;AAAA,kCACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eASE,QAAC,SAAD;AAAA,kBACIA,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAsB,CAAC;AACvBC,UAAAA,IADuB;AACjBC,UAAAA,cADiB;AACDC,UAAAA,KADC;AACMC,UAAAA;AADN,SAAD,kBAGtB,QAAC,QAAD;AAAA,kCACE,QAAC,SAAD;AAAA,sBAAYH;AAAZ;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,SAAD;AAAA,sBAAYC;AAAZ;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE,QAAC,SAAD;AAAA,sBAAYC;AAAZ;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE,QAAC,SAAD;AAAA,sBAAYC;AAAZ;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHA;AADJ;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UAJF;AAAA,gBADF;;KAAMP,K;AAgCNA,KAAK,CAACQ,SAAN,GAAkB;AAChBP,EAAAA,OAAO,EAAEF,SAAS,CAACU,OAAV,CAAkBV,SAAS,CAACW,MAA5B;AADO,CAAlB;AAIA,eAAeC,YAAf","sourcesContent":["import { Helmet } from 'react-helmet';\r\nimport {\r\n  TableContainer, Table, TableHead, TableRow, TableCell, TableBody\r\n} from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Admin = ({ samples }) => (\r\n  <>\r\n    <Helmet>\r\n      <title>Customers | Material Kit</title>\r\n    </Helmet>\r\n    <TableContainer>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Sample Name</TableCell>\r\n            <TableCell>Date Submitted</TableCell>\r\n            <TableCell>Stage</TableCell>\r\n            <TableCell>Estimated Time of Completion</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          { samples.array.forEach(({\r\n            name, submissionDate, stage, eta\r\n          }) => (\r\n            <TableRow>\r\n              <TableCell>{name}</TableCell>\r\n              <TableCell>{submissionDate}</TableCell>\r\n              <TableCell>{stage}</TableCell>\r\n              <TableCell>{eta}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  </>\r\n);\r\n\r\nAdmin.propTypes = {\r\n  samples: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n\r\nexport default CustomerList;\r\n"]},"metadata":{},"sourceType":"module"}